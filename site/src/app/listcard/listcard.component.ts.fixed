import { Component, Input, Output, EventEmitter } from '@angular/core';
import { ProductInterface, Variant } from '../product-interface';
import { CommonModule } from '@angular/common';
import { RouterLink, Router } from '@angular/router';
import { CartService } from '../cart.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-listcard',
  standalone: true,
  imports: [CommonModule, RouterLink],
  templateUrl: './listcard.component.html',
  styleUrls: ['./listcard.component.css']
})
export class ListcardComponent {
  @Input() product!: ProductInterface;
  @Input() data: ProductInterface[] = [];
  @Input() title = '';
  @Output() wishlistToggled = new EventEmitter<ProductInterface>();

  constructor(
    private router: Router,
    private cartService: CartService
  ) {}

  isSaleProduct(product: ProductInterface): boolean {
    return !!product.salePrice && product.salePrice > 0 && product.salePrice < product.price;
  }

  isNewProduct(createdAt: string | Date | undefined): boolean {
    if (!createdAt) return false;
    const created = new Date(createdAt);
    const now = new Date();
    const diffDays = (now.getTime() - created.getTime()) / (1000 * 3600 * 24);
    return diffDays <= 7;
  }

  calculateDiscountPercentage(price: number, salePrice: number): number {
    return Math.round(((price - salePrice) / price) * 100);
  }

  toggleWishlist(product: ProductInterface, event: Event): void {
    event.preventDefault();
    event.stopPropagation();
    
    const token = localStorage.getItem('token');
    if (!token) {
      Swal.fire({
        title: 'Thông báo',
        text: 'Vui lòng đăng nhập để sử dụng tính năng yêu thích',
        icon: 'info',
        confirmButtonText: 'OK'
      }).then(() => {
        this.router.navigate(['/dangnhap']);
      });
      return;
    }
    
    this.wishlistToggled.emit(product);
  }

  isInWishlist(product: ProductInterface): boolean {
    return product?.isInWishlist || false;
  }

  buyNow(product: ProductInterface) {
    if (product.variants && product.variants.length > 0) {
      this.router.navigate(['/chitiet', product._id]);
      return;
    }

    const productToAdd: ProductInterface = { ...product };
    this.cartService.addToCart(productToAdd);

    Swal.fire({
      title: 'Thành công',
      text: `Đã thêm ${product.name} vào giỏ hàng`,
      icon: 'success',
      confirmButtonText: 'OK'
    }).then(() => {
      this.router.navigate(['/giohang']);
    });
  }

  addToCart(product: ProductInterface) {
    if (product.variants && product.variants.length > 0) {
      this.router.navigate(['/chitiet', product._id]);
      return;
    }

    const productToAdd: ProductInterface = { ...product };
    this.cartService.addToCart(productToAdd);
    Swal.fire({
      title: 'Thành công',
      text: `Đã thêm ${product.name} vào giỏ hàng`,
      icon: 'success',
      confirmButtonText: 'OK'
    });
  }

  getCurrentPrice(product: ProductInterface): number {
    if (product.salePrice && product.salePrice > 0) {
      return product.salePrice;
    }
    return product.price;
  }

  getOriginalPrice(product: ProductInterface): number {
    return product.price;
  }

  hasDiscount(product: ProductInterface): boolean {
    if (!product || typeof product.price === 'undefined') return false;
    return !!product.salePrice && product.salePrice > 0 && product.salePrice < product.price;
  }

  calculateDiscount(product: ProductInterface): number {
    if (!product.salePrice || product.salePrice >= product.price) {
      return 0;
    }
    return Math.round(((product.price - product.salePrice) / product.price) * 100);
  }

  isInStock(product: ProductInterface): boolean {
    if (!product) return false;
    if (product.variants && Array.isArray(product.variants) && product.variants.length > 0) {
      return product.variants.some(v => v && v.stock > 0);
    }
    return (product.stock || 0) > 0;
  }
}
