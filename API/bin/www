#!/usr/bin/env node

/**
 * Module dependencies.
 */

var { app, Message } = require('../src/app');
var debug = require('debug')('myapp:server');
var http = require('http');
require('dotenv').config();
const socketIo = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: ['http://localhost:4200', 'http://localhost:4201'],
    methods: ['GET', 'POST']
  }
});

io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  socket.on('join', (role) => {
    socket.join(role);
    console.log(`${role} joined: ${socket.id}`);
  });

  socket.on('sendMessage', (messageData) => {
    const { from, to, message } = messageData;
    io.to('admin').emit('receiveMessage', { from, message });
    saveMessage(from, to, message);
  });

  socket.on('replyMessage', (messageData) => {
    const { from, to, message } = messageData;
    io.to('client').emit('receiveMessage', { from, message });
    saveMessage(from, to, message);
  });

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

const saveMessage = async (from, to, message) => {
  try {
    await Message.create({ from, to, message });
  } catch (err) {
    console.error('Error saving message:', err);
  }
};


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}